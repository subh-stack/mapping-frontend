# backend_app.py

from flask import Flask, render_template, jsonify
import requests
from threading import Thread
import time
import math
import webbrowser

app = Flask(_name_)

esp32_ip = "http://192.168.29.251/"

gps_points = []  # List of [lat, lng, duration_ms]

# === Function to calculate distance between two lat/lng points (Haversine formula) ===
def haversine(lat1, lon1, lat2, lon2):
    from math import radians, sin, cos, sqrt, atan2
    R = 6371  # Earth radius in km
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)*2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)*2
    c = 2 * atan2(sqrt(a), sqrt(1 - a))
    return R * c

# === Background thread to collect GPS data ===
def fetch_gps_data():
    while True:
        try:
            response = requests.get(esp32_ip, timeout=5)
            if response.status_code == 200:
                data = response.text.strip()
                try:
                    lines = data.split("\n")

                    # ðŸ›  Skip "Button Pressed!" if it's the first line
                    if lines[0].startswith("Button"):
                        lines = lines[1:]

                    if len(lines) < 3:
                        raise ValueError("Not enough lines to parse")

                    lat_raw = lines[0].split(":")[1].strip()
                    lng_raw = lines[1].split(":")[1].strip()
                    dur_raw = lines[2].split(":")[1].strip().split()[0]  # "221 ms" â†’ "221"

                    # Skip N/A values
                    if lat_raw == "N/A" or lng_raw == "N/A":
                        raise ValueError("GPS not ready yet")

                    lat = float(lat_raw)
                    lng = float(lng_raw)
                    duration = int(dur_raw)

                    # Add new point if it's different
                    if not gps_points or (gps_points[-1][:2] != [lat, lng]):
                        gps_points.append([lat, lng, duration])
                        print(f"New GPS point: {lat}, {lng}, duration: {duration} ms")
                except Exception as e:
                    print("Error parsing:", e)
                    print("Raw data:", repr(data))
        except:
            pass
        time.sleep(2)


@app.route('/')
def index():
    return render_template('map.html')

@app.route('/data')
def data():
    total_distance = 0
    for i in range(1, len(gps_points)):
        total_distance += haversine(
            gps_points[i-1][0], gps_points[i-1][1],
            gps_points[i][0], gps_points[i][1]
        )
    return jsonify({
        "points": gps_points,
        "distance": round(total_distance, 3)
    })

if _name_ == '_main_':
    Thread(target=fetch_gps_data, daemon=True).start()
    webbrowser.open("http://127.0.0.1:5000")  # Auto open map page
    app.run(debug=True, port=5000)
